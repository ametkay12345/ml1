euclidian_dist <- function(u, v)
{
  return (sqrt(sum((u - v)^2)))
}


sort_data_by_dist <- function(data, u)
{

  # This function gets the data and a point and finds distances for
  # all of the other points in data, then returns sorted data
  # by distances in ascending order.
    
  row <- dim(data)[1]
  col <- dim(data)[2]
  
  distances <- matrix(NA, row, 2)
  for(i in 1:row)
  {
    distances[i, ] <- c(i, euclidian_dist(data[i, 1:col-1], u))
  }
  ans <- data[order(distances[, 2]), ]
  return (ans)
}


nn <- function(data, u) 
{
  # This function gets the data and a point and returns
  # the nearest one.

  ordered_data <- sort_data_by_dist(data, u)
  row <- dim(ordered_data)[1]
  col <- dim(ordered_data)[2]
  return (ordered_data[1,col])
}


main <- function()
{
  colors <- c("setosa" = "red", "versicolor" = "green3", "virginica" = "blue")
  train = iris[,3:5]
  
  # drawing a plot of petal parameters
  plot(train[1:2], pch = 21, bg = colors[iris$Species], 
       col = colors[iris$Species], asp = 1)
  
  # generate 10 tests
  test <- cbind(runif(10, min=0.1, max=6.9), 
                runif(10, min=0.1, max=2.4))

  
  for(i in 1:10)
  {
    answer <- nn(train, c(test[i, 1], test[i, 2]))
    points(test[i, 1], test[i, 2], pch = 22, 
           bg = colors[answer], asp = 1)
  }
}


main()

